module Day5 where

import Data.List
import Data.Char
import Data.Sequence as Seq
import Data.Bool

inputData :: Seq Int
inputData = fromList [3,225,1,225,6,6,1100,1,238,225,104,0,1101,11,91,225,1002,121,77,224,101,-6314,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1102,74,62,225,1102,82,7,224,1001,224,-574,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,28,67,225,1102,42,15,225,2,196,96,224,101,-4446,224,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1101,86,57,225,1,148,69,224,1001,224,-77,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1101,82,83,225,101,87,14,224,1001,224,-178,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1101,38,35,225,102,31,65,224,1001,224,-868,224,4,224,1002,223,8,223,1001,224,5,224,1,223,224,223,1101,57,27,224,1001,224,-84,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1101,61,78,225,1001,40,27,224,101,-89,224,224,4,224,1002,223,8,223,1001,224,1,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,226,224,1002,223,2,223,1006,224,329,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,344,101,1,223,223,1107,226,677,224,102,2,223,223,1006,224,359,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,374,101,1,223,223,7,677,677,224,102,2,223,223,1005,224,389,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,404,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,419,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,434,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,464,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,479,101,1,223,223,1007,226,677,224,1002,223,2,223,1006,224,494,101,1,223,223,8,677,226,224,1002,223,2,223,1005,224,509,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,524,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,539,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,554,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,569,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,584,101,1,223,223,1107,677,677,224,102,2,223,223,1005,224,599,101,1,223,223,1108,226,677,224,102,2,223,223,1006,224,614,101,1,223,223,8,226,226,224,102,2,223,223,1006,224,629,101,1,223,223,108,226,677,224,102,2,223,223,1005,224,644,1001,223,1,223,108,226,226,224,102,2,223,223,1005,224,659,101,1,223,223,1108,677,226,224,102,2,223,223,1006,224,674,1001,223,1,223,4,223,99,226]


evolveProgram :: Int -> Seq Int -> [Int] -> Seq Int
evolveProgram cursor program io | mode == 99 = fromList io
                                | mode == 1 = evolveProgram (cursor + 4) (applier program target (+) val1 val2) io
                                | mode == 2 = evolveProgram (cursor + 4) (applier program target (*) val1 val2) io
                                | mode == 3 = evolveProgram (cursor + 2) (update p1 (head io) program) (tail io)
                                | mode == 4 = evolveProgram (cursor + 2) program (index program p1 : io)
                                | mode == 5 = evolveProgram (bool (cursor + 3) val2 (val1 /= 0)) program io
                                | mode == 6 = evolveProgram (bool (cursor + 3) val2 (val1 == 0)) program io
                                | mode == 7 = evolveProgram (cursor + 4) (update target (bool 0 1 (val1 < val2)) program) io
                                | mode == 8 = evolveProgram (cursor + 4) (update target (bool 0 1 (val1 == val2)) program) io
                                | mode == 9 = fromList [99999]
                                where   command = index program cursor
                                        p1 = index program (cursor + 1)
                                        p2 = index program (cursor + 2)
                                        target = index program (cursor + 3)
                                        mode = getOpcode command
                                        p1Mode = getParamMode command 1
                                        p2Mode = getParamMode command 2
                                        val1 = getVal p1 p1Mode program
                                        val2 = getVal p2 p2Mode program

applier :: Seq Int -> Int -> (Int -> Int -> Int) -> Int -> Int -> Seq Int
applier program target f val1 val2 = update target (f val1 val2) program

getOpcode :: Int -> Int
getOpcode val = val `mod` 100

getParamMode :: Int -> Int -> Int
getParamMode val p = (val `mod` (10^(p+2))) `div` (10^(p+1))

getVal :: Int -> Int -> Seq Int -> Int
getVal val 0 program = index program val
getVal val 1 program = val

part1, part2 :: Int
part1 = index (evolveProgram 0 inputData [1]) 0
part2 = index (evolveProgram 0 inputData [5]) 0
module Day10 where

import Data.List
import Data.Char
import Data.Maybe
import Data.List.Split

type Coord = (Int, Int)
type Velo = (Int, Int)
type Position = (Coord, Velo)

inputData :: [Position]
-- inputData = [((9,1),(0,2)),((7,0),(-1,0)),((3,-2),(-1,1)),((6,10),(-2,-1)),((2,-4),(2,2)),((-6,10),(2,-2)),((1,8),(1,-1)),((1,7),(1,0)),((-3,11),(1,-2)),((7,6),(-1,-1)),((-2,3),(1,0)),((-4,3),(2,0)),((10,-3),(-1,1)),((5,11),(1,-2)),((4,7),(0,-1)),((8,-2),(0,1)),((15,0),(-2,0)),((1,6),(1,0)),((8,9),(0,-1)),((3,3),(-1,1)),((0,5),(0,-1)),((-2,2),(2,0)),((5,-2),(1,2)),((1,4),(2,1)),((-2,7),(2,-2)),((3,6),(-1,-1)),((5,0),(1,0)),((-6,0),(2,0)),((5,9),(1,-2)),((14,7),(-2,0)),((-3,6),(2,-1))]
inputData = [(( 50200,  10144),(-5, -1)),(( -9855,  -9873),( 1,  1)),((-29840,  30163),( 3, -3)),(( 50213,  30162),(-5, -3)),(( 20168,  20161),(-2, -2)),(( 20147,  10144),(-2, -1)),(( 30166, -39894),(-3,  4)),(( -9863,  20157),( 1, -2)),(( 20176,  50185),(-2, -5)),(( 40210,  -9867),(-4,  1)),(( 40178, -29887),(-4,  3)),(( -9840,  40171),( 1, -4)),((-29893,  -9868),( 3,  1)),(( 20149, -39901),(-2,  4)),(( 30185,  40179),(-3, -4)),(( 50171,  10147),(-5, -1)),(( 50232, -29885),(-5,  3)),(( 10151,  10150),(-1, -1)),(( 30205,  30167),(-3, -3)),((-49871,  20158),( 5, -2)),(( -9859,  -9865),( 1,  1)),(( 10151, -19882),(-1,  2)),(( -9843,  10144),( 1, -1)),(( -9825,  -9865),( 1,  1)),(( 10170,  20162),(-1, -2)),((-49917,  40171),( 5, -4)),(( 40164,  40171),(-4, -4)),(( 30198,  40171),(-3, -4)),(( 50179, -49909),(-5,  5)),(( 40199,  -9865),(-4,  1)),(( 10193, -39901),(-1,  4)),((-29880, -29886),( 3,  3)),(( 30193, -29890),(-3,  3)),(( -9857,  30168),( 1, -3)),((-29893, -29887),( 3,  3)),(( -9843,  20159),( 1, -2)),(( 10176,  50180),(-1, -5)),(( 50172, -19883),(-5,  2)),(( 40218, -29884),(-4,  3)),((-49911,  -9870),( 5,  1)),((-19852,  40180),( 2, -4)),(( -9883, -19876),( 1,  2)),((-29901,  30166),( 3, -3)),(( 20160,  30171),(-2, -3)),(( 50171, -19880),(-5,  2)),(( 10148,  -9866),(-1,  1)),(( 20197, -49901),(-2,  5)),((-49895, -49902),( 5,  5)),(( 50211,  30166),(-5, -3)),(( 30211,  10144),(-3, -1)),((-19868, -39895),( 2,  4)),((-39867,  -9870),( 4,  1)),((-49911,  30168),( 5, -3)),(( 50179,  50187),(-5, -5)),(( 50219, -29887),(-5,  3)),((-49895,  -9874),( 5,  1)),(( 20145, -29888),(-2,  3)),(( 10156,  30163),(-1, -3)),(( 20176, -49910),(-2,  5)),((-49863, -49902),( 5,  5)),((-39850,  30170),( 4, -3)),(( 50214, -19879),(-5,  2)),((-19882,  30162),( 2, -3)),(( 10160, -19878),(-1,  2)),(( 20168,  40180),(-2, -4)),(( 50195,  50185),(-5, -5)),(( -9858,  -9870),( 1,  1)),(( 50187,  10153),(-5, -1)),((-49919, -19877),( 5,  2)),(( 30209,  10151),(-3, -1)),((-49879,  20159),( 5, -2)),((-39902,  30171),( 4, -3)),(( 30166,  50182),(-3, -5)),(( -9855,  50188),( 1, -5)),((-39849,  50185),( 4, -5)),((-19884, -19880),( 2,  2)),((-39902, -49902),( 4,  5)),(( 50171, -29892),(-5,  3)),(( -9883, -39892),( 1,  4)),((-19850,  50184),( 2, -5)),((-19892, -19878),( 2,  2)),((-39870, -39894),( 4,  4)),((-39870,  40174),( 4, -4)),(( 30196,  50189),(-3, -5)),((-49874, -29883),( 5,  3)),((-19888,  50180),( 2, -5)),((-49858,  10152),( 5, -1)),(( 50192, -49905),(-5,  5)),((-49907,  50184),( 5, -5)),(( 50184,  20160),(-5, -2)),(( -9830, -19876),( 1,  2)),(( 10159,  40172),(-1, -4)),(( 20205,  -9867),(-2,  1)),(( 40211, -19878),(-4,  2)),(( 20185,  10144),(-2, -1)),((-49875,  -9865),( 5,  1)),(( 10176,  30166),(-1, -3)),((-19836,  10150),( 2, -1)),((-19879, -29889),( 2,  3)),(( 10183, -49905),(-1,  5)),(( 20165,  10148),(-2, -1)),(( 50171, -49909),(-5,  5)),(( 30185,  20158),(-3, -2)),((-49915,  10148),( 5, -1)),((-39859,  10144),( 4, -1)),(( 50195, -49904),(-5,  5)),(( 40218, -39899),(-4,  4)),(( 50183,  -9874),(-5,  1)),(( 20204, -39901),(-2,  4)),(( 50195, -29891),(-5,  3)),((-39902,  20162),( 4, -2)),(( 20152,  30162),(-2, -3)),((-39894, -39895),( 4,  4)),((-19841, -19878),( 2,  2)),((-19848,  30171),( 2, -3)),(( -9870,  30168),( 1, -3)),(( 40179, -19879),(-4,  2)),((-49910, -39892),( 5,  4)),(( 10146,  -9870),(-1,  1)),(( 20197, -49902),(-2,  5)),((-19839,  40179),( 2, -4)),((-49898, -29883),( 5,  3)),(( 20147,  20157),(-2, -2)),(( 20176, -49905),(-2,  5)),(( 10148, -19881),(-1,  2)),(( 20152,  40173),(-2, -4)),(( 20144,  20155),(-2, -2)),((-49858,  10151),( 5, -1)),(( -9842,  20157),( 1, -2)),(( 50227,  50185),(-5, -5)),((-29877,  50181),( 3, -5)),(( 50203,  50189),(-5, -5)),(( -9870,  10145),( 1, -1)),(( -9872,  20157),( 1, -2)),(( 20200,  40176),(-2, -4)),(( 50227,  50182),(-5, -5)),(( -9862,  50187),( 1, -5)),((-29857,  40171),( 3, -4)),(( 30201,  40174),(-3, -4)),((-29900, -39897),( 3,  4)),((-39868,  -9870),( 4,  1)),((-39854, -19882),( 4,  2)),((-29896,  10144),( 3, -1)),(( 20168,  50183),(-2, -5)),(( 20184, -19875),(-2,  2)),(( -9882,  -9874),( 1,  1)),((-29885, -39894),( 3,  4)),(( 20184, -49901),(-2,  5)),((-39910,  10150),( 4, -1)),((-29842,  -9865),( 3,  1)),(( 10195,  40171),(-1, -4)),(( 50187,  40174),(-5, -4)),(( 20192,  -9865),(-2,  1)),(( -9839, -29883),( 1,  3)),(( 10194,  20158),(-1, -2)),(( -9827,  20160),( 1, -2)),((-49914, -29892),( 5,  3)),(( 10170,  20162),(-1, -2)),(( 10151,  40172),(-1, -4)),(( -9846, -39892),( 1,  4)),(( 20176,  40173),(-2, -4)),((-29885,  50182),( 3, -5)),(( 10193,  30162),(-1, -3)),(( 20160, -29884),(-2,  3)),((-19874, -49906),( 2,  5)),(( -9830,  50188),( 1, -5)),(( 20176,  -9868),(-2,  1)),(( 50211,  40176),(-5, -4)),((-29869, -29891),( 3,  3)),((-29861,  30168),( 3, -3)),(( 50195,  50188),(-5, -5)),((-49903, -19882),( 5,  2)),((-49916,  -9870),( 5,  1)),(( 30201, -29889),(-3,  3)),(( -9875,  50181),( 1, -5)),((-39910,  30170),( 4, -3)),(( 50211, -29892),(-5,  3)),(( 50219,  50183),(-5, -5)),(( -9873,  40175),( 1, -4)),(( -9855, -29891),( 1,  3)),((-29861,  20160),( 3, -2)),((-39894,  20157),( 4, -2)),(( 30153, -29886),(-3,  3)),(( 20171,  -9867),(-2,  1)),(( 20176,  -9867),(-2,  1)),((-39870, -39899),( 4,  4)),(( 30198, -29892),(-3,  3)),(( -9854, -49901),( 1,  5)),(( 10139, -49910),(-1,  5)),(( -9830, -19880),( 1,  2)),(( -9830, -39894),( 1,  4)),((-29880,  30162),( 3, -3)),(( -9875, -19876),( 1,  2)),(( 10195, -19875),(-1,  2)),((-29892,  40171),( 3, -4)),((-29893, -19883),( 3,  2)),(( 20176, -19875),(-2,  2)),((-29844, -19883),( 3,  2)),((-29859,  10144),( 3, -1)),(( 40211, -29887),(-4,  3)),((-49871,  10151),( 5, -1)),(( 20157, -39894),(-2,  4)),(( 30185,  -9865),(-3,  1)),(( 30196, -29892),(-3,  3)),(( 20197,  40175),(-2, -4)),((-19850,  20162),( 2, -2)),(( 30153,  -9874),(-3,  1)),(( 30153,  10148),(-3, -1)),((-39862, -49902),( 4,  5)),(( 50203, -19879),(-5,  2)),((-39883, -39899),( 4,  4)),(( -9862, -19880),( 1,  2)),(( 20204,  50180),(-2, -5)),(( 30195, -49906),(-3,  5)),(( 10167,  10150),(-1, -1)),((-29865, -49901),( 3,  5)),(( 30164, -39892),(-3,  4)),(( -9835, -49908),( 1,  5)),((-19871, -19882),( 2,  2)),((-29853,  30168),( 3, -3)),((-19868,  20157),( 2, -2)),(( 50195, -19881),(-5,  2)),(( 40170, -49904),(-4,  5)),((-19851, -49910),( 2,  5)),(( -9862,  30164),( 1, -3)),(( 50171,  -9872),(-5,  1)),((-39869, -19874),( 4,  2)),(( 30180,  20155),(-3, -2)),(( 10188,  20157),(-1, -2)),(( 10191,  -9867),(-1,  1)),((-29845,  10152),( 3, -1)),((-19889, -39901),( 2,  4)),(( 40170,  20153),(-4, -2)),(( 30177,  10150),(-3, -1)),(( 30185,  20157),(-3, -2)),(( 40206,  10144),(-4, -1)),((-39894,  50180),( 4, -5)),((-19892,  10146),( 2, -1)),((-39854,  10150),( 4, -1)),((-39889,  10151),( 4, -1)),(( 10188, -39895),(-1,  4)),(( 30196,  20162),(-3, -2)),(( 10178, -29892),(-1,  3)),(( 20184,  40178),(-2, -4)),(( 20153, -49901),(-2,  5)),(( 30165,  10153),(-3, -1)),((-49861,  30171),( 5, -3)),(( 40186,  10149),(-4, -1)),((-49903,  20156),( 5, -2)),(( 40179,  10148),(-4, -1)),(( -9859, -19879),( 1,  2)),(( -9827, -19880),( 1,  2)),((-39894,  10146),( 4, -1)),(( 40178,  10146),(-4, -1)),((-19842,  10149),( 2, -1)),(( 20192, -29884),(-2,  3)),((-19884, -39897),( 2,  4)),(( 40162,  30163),(-4, -3)),(( 50192,  40173),(-5, -4)),(( 50173, -49906),(-5,  5)),(( 40178, -49906),(-4,  5)),(( 20205, -29887),(-2,  3)),(( 30193,  10149),(-3, -1)),((-49871, -29886),( 5,  3)),((-39910,  20156),( 4, -2)),(( -9862,  -9867),( 1,  1)),((-19860, -49904),( 2,  5)),(( 20176, -19883),(-2,  2)),(( -9862,  50189),( 1, -5)),((-49895,  30166),( 5, -3)),(( -9875, -29885),( 1,  3)),(( 20184,  -9873),(-2,  1)),((-49919,  10144),( 5, -1)),(( -9870,  40172),( 1, -4)),((-49866,  30166),( 5, -3)),(( 30165, -29888),(-3,  3)),((-19864,  -9866),( 2,  1)),(( 20187,  20162),(-2, -2)),(( 20172, -29884),(-2,  3)),((-19876, -19879),( 2,  2)),(( 30197, -49910),(-3,  5)),(( 10168, -29883),(-1,  3)),(( 10160, -19878),(-1,  2)),((-29893, -39892),( 3,  4)),((-19883, -19879),( 2,  2)),((-29842,  20153),( 3, -2)),((-39878,  30165),( 4, -3)),(( 40223, -19874),(-4,  2)),((-49911,  20155),( 5, -2)),((-49859, -19878),( 5,  2)),(( 50200,  10153),(-5, -1)),(( 10145, -49910),(-1,  5)),(( 20197,  30168),(-2, -3)),((-19892, -29887),( 2,  3)),(( 10167,  30166),(-1, -3)),((-49903,  30168),( 5, -3)),(( -9864,  -9870),( 1,  1)),((-19833,  40180),( 2, -4)),(( 50219,  50189),(-5, -5)),(( 20197,  10153),(-2, -1)),((-39858,  50185),( 4, -5)),(( 50204, -39892),(-5,  4)),(( 40215, -49905),(-4,  5)),(( 20168,  50180),(-2, -5)),((-29880,  40173),( 3, -4)),(( -9864,  40175),( 1, -4)),((-39862,  10153),( 4, -1)),(( -9854,  -9865),( 1,  1)),((-29880, -49907),( 3,  5)),(( -9879, -19879),( 1,  2)),(( 50228,  10153),(-5, -1)),(( 50187,  50183),(-5, -5)),(( -9843, -19874),( 1,  2)),(( 30206,  40178),(-3, -4)),((-29867, -49901),( 3,  5)),(( 40165, -19879),(-4,  2)),(( 20200,  20157),(-2, -2)),(( -9859,  10151),( 1, -1)),(( 20155, -39897),(-2,  4)),(( 30154, -39901),(-3,  4)),(( 50207, -49901),(-5,  5)),((-29841, -49902),( 3,  5)),((-39889,  20158),( 4, -2)),(( 40173,  30162),(-4, -3)),(( 30177,  50187),(-3, -5)),(( 40183,  40179),(-4, -4)),(( 40219, -29883),(-4,  3)),(( 40182,  -9870),(-4,  1)),(( -9843,  40179),( 1, -4)),((-39866,  30166),( 4, -3)),(( -9867, -49910),( 1,  5)),((-39877,  50189),( 4, -5)),((-49879,  -9870),( 5,  1)),(( 50224, -29890),(-5,  3)),(( 40172, -49901),(-4,  5)),(( 10151, -39893),(-1,  4)),(( 20193,  10145),(-2, -1)),(( 40223,  -9868),(-4,  1)),((-49911, -19875),( 5,  2)),(( 30174,  10144),(-3, -1)),(( 20154, -29883),(-2,  3)),((-19844,  30168),( 2, -3)),((-19865, -49908),( 2,  5)),((-19843, -49909),( 2,  5)),(( 50171, -49909),(-5,  5)),(( 30210,  40180),(-3, -4)),(( -9880,  50180),( 1, -5)),((-39870, -19875),( 4,  2)),(( -9835,  10148),( 1, -1)),((-39862, -29888),( 4,  3)),(( -9833,  30162),( 1, -3)),((-39852, -19874),( 4,  2)),((-39909, -19879),( 4,  2)),((-49903,  40178),( 5, -4)),(( -9848,  50189),( 1, -5)),(( -9831, -29891),( 1,  3)),((-19880, -39892),( 2,  4)),(( 50216, -49910),(-5,  5)),(( 50197, -39898),(-5,  4)),((-39897,  50185),( 4, -5)),(( -9867, -49902),( 1,  5)),(( 30162, -19874),(-3,  2)),((-19875,  40175),( 2, -4)),(( 10156, -19878),(-1,  2)),(( -9871, -49906),( 1,  5)),((-19880,  30162),( 2, -3))]

points = getPoints inputData

getPoints :: [Position] -> [Coord]
getPoints pos = map fst pos
minX coords = minimum (map fst coords)
maxX coords = maximum (map fst coords)

minY coords = minimum (map snd coords)
maxY coords = maximum (map snd coords)


getGrid :: [Coord] -> [Coord]
getGrid coords = [mergeXY x y coords | y <- getYRange coords, x <- getXRange coords] 

getXRange coords = [(minX coords)..(maxX coords)] ++ [999]
getYRange coords = [(minY coords)..(maxY coords)]

mergeXY :: Int -> Int -> [Coord] -> Coord
mergeXY x y coords  | x == 999 = (999,999)
                    | (x,y) `elem` coords = (x,y)
                    | otherwise = (0,0) 

printGrid :: [Coord] -> IO ()
printGrid grid = mapM_ putStrLn (splitOn "X" (map printCoord (getGrid grid)))

printCoord :: Coord -> Char
printCoord (x,y)    | x == 999 = 'X'  
                    | (x,y) == (0,0) = '.'
                    | otherwise = '#'
            
evolvePosition :: Position -> Position
evolvePosition ((x,y), (dx,dy)) = ((x+dx,y+dy), (dx,dy))                

evolver :: [Position] -> Int -> [Position]
evolver positions 0 = positions
evolver positions n | (maxY . getPoints) positions - (minY . getPoints) positions < 15 = positions
                    | otherwise = evolver (map evolvePosition positions) (n-1)

resultP1 :: IO ()
resultP1 = printGrid (getPoints (evolver inputData 100000))

evolver' :: [Position] -> Int -> Int
evolver' positions 0 = -1
evolver' positions n | (maxY . getPoints) positions - (minY . getPoints) positions < 15 = n
                     | otherwise = evolver' (map evolvePosition positions) (n-1)

resultP2 :: Int
resultP2 = 100000 - evolver' inputData 100000